// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API –≤–∞—à–µ–≥–æ Spring Boot –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
const API_BASE_URL = 'https://your-spring-app.herokuapp.com'; // –∏–ª–∏ –ª–æ–∫–∞–ª—å–Ω—ã–π –¥–ª—è —Ç–µ—Å—Ç–∞

class ProductStore {
    constructor() {
        this.products = [];
        this.init();
    }

    async init() {
        await this.loadProducts();
        this.renderProducts();
    }

    async loadProducts() {
        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ products.json
            const response = await fetch('products.json');
            const productsData = await response.json();

            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—ä–µ–∫—Ç –≤ –º–∞—Å—Å–∏–≤
            this.products = Object.entries(productsData).map(([id, product]) => ({
                id: id,
                name: product.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
                description: product.description || '',
                price: product.price || 0,
                category: product.category || '–ù–µ —É–∫–∞–∑–∞–Ω–∞',
                available: product.available !== false,
                stock: product.stock || 0,
                amount: product.amount || '',
                imageUrls: product.imageUrls || ['https://via.placeholder.com/300x200?text=–§–æ—Ç–æ+—Ç–æ–≤–∞—Ä–∞']
            }));

            console.log('–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤:', this.products.length);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤:', error);
            this.products = this.getLocalProducts();
        }
    }

    getLocalProducts() {
        // –†–µ–∑–µ—Ä–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        return [
            {
                id: "1",
                name: "–ú—ë–¥ –ª–∏–ø–æ–≤—ã–π",
                description: "–ù–∞—Ç—É—Ä–∞–ª—å–Ω—ã–π –ª–∏–ø–æ–≤—ã–π –º—ë–¥",
                price: 850,
                category: "–ú—ë–¥",
                available: true,
                imageUrls: ["https://via.placeholder.com/300x200?text=–õ–∏–ø–æ–≤—ã–π+–ú—ë–¥"]
            },
            {
                id: "002",
                name: "–ú—ë–¥ –≥—Ä–µ—á–∏—à–Ω—ã–π",
                description: "–¢—ë–º–Ω—ã–π –≥—Ä–µ—á–∏—à–Ω—ã–π –º—ë–¥",
                price: 600,
                imageUrls: ["https://via.placeholder.com/300x200?text=–ì—Ä–µ—á–∏—à–Ω—ã–π+–ú—ë–¥"]
            }
        ];
    }

    renderProducts() {
        const container = document.getElementById('products-container');

        if (this.products.length === 0) {
            container.innerHTML = '<p>‚ùå –¢–æ–≤–∞—Ä—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã</p>';
            return;
        }

        container.innerHTML = '';

        this.products.forEach(product => {
            if (product.available) {
                const productCard = this.createProductCard(product);
                container.appendChild(productCard);
            }
        });
    }

    createProductCard(product) {
        const card = document.createElement('div');
        card.className = 'product-card';

        card.innerHTML = `
            <img src="${product.imageUrls[0]}" alt="${product.name}">
            <h3>${product.name}</h3>
            <p class="description">${product.description}</p>
            <p class="category">–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${product.category}</p>
            <p class="amount">${product.amount || ''}</p>
            <div class="price">${product.price} —Ä—É–±.</div>
            <p class="stock">${product.stock > 0 ? `–í –Ω–∞–ª–∏—á–∏–∏: ${product.stock} —à—Ç.` : '–ü–æ–¥ –∑–∞–∫–∞–∑'}</p>
            <button onclick="orderProduct('${product.id}')" class="order-btn">
                üõí –ó–∞–∫–∞–∑–∞—Ç—å –≤ Telegram
            </button>
        `;

        return card;
    }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ Telegram
function orderProduct(productId) {
    const product = productStore.products.find(p => p.id === productId);
    if (product) {
        const message = `–ó–∞–∫–∞–∑: ${product.name} - ${product.price} —Ä—É–±.`;
        // –ó–∞–º–µ–Ω–∏—Ç–µ YOUR_BOT_NAME –Ω–∞ –∏–º—è –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
        const telegramUrl = `https://t.me/farmershop72_bot?start=order_${productId}`;
        window.open(telegramUrl, '_blank');
    }
}

// –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤
function searchProducts() {
    const searchTerm = document.getElementById('searchInput').value.toLowerCase();
    const container = document.getElementById('products-container');

    container.innerHTML = '';

    const filteredProducts = productStore.products.filter(product =>
        product.available && (
            product.name.toLowerCase().includes(searchTerm) ||
            product.description.toLowerCase().includes(searchTerm) ||
            product.category.toLowerCase().includes(searchTerm)
        )
    );

    if (filteredProducts.length === 0) {
        container.innerHTML = '<p>–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>';
        return;
    }

    filteredProducts.forEach(product => {
        const productCard = productStore.createProductCard(product);
        container.appendChild(productCard);
    });
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞–≥–∞–∑–∏–Ω–∞
const productStore = new ProductStore();

// –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
setInterval(() => {
    productStore.init();
}, 300000);